#include <boost/shared_ptr.hpp>
#include <vector>
#include <iostream>
#include <iomanip>

class Vector {
  private:
    // data container
    typedef boost::shared_ptr<double[]> Array;  Array _array;
    // attributes
    int _shape, _stride, _offset;
  public:
    // public constructor
    Vector(int shape, int stride=1, int offset=0)
    : _shape(shape), _stride(stride), _offset(offset) {_array = Array(new double[_offset + _shape*_stride]);}
    // element and slice access
    double  operator()(int   i) const {return _array[_offset + _stride * i];}
    double& operator()(int   i)       {return _array[_offset + _stride * i];}
    // operator=
    template<class V>
    Vector& operator=(const Expression<V>& other)
    {
      if(_shape != other._shape) throw std::invalid_argument("Cannot apply operator= to vectors with distinct shapes.");
      for(int i=0; i<_shape; ++i)
        (*this)(i) = other(i);
      return *this;
    }
    // print function
    void print() const {for(int i=0; i<_shape; ++i) std::cout << std::setw(3) << (*this)(i); std::cout << std::endl;}
};

int main()
{
  Vector v(5);
  v(0) = 0; v(1) = 1; v(2) = 2; v(3) = 3; v(4) = 4;

  v.print();
}
